name: Release Notification

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  notify:
    if: startsWith(github.event.pull_request.head.ref, 'release-')
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL: 'C05PW7HGP36'  # Replace with your Slack channel ID
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPO: ${{ github.repository }}

    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Declare GitHub to Slack User Map
        id: declare-map
        run: |
          declare -A github_to_slack_map=(
            ["mduchev"]="@Mihail Duchev"
            ["krzysztof-kolakowski"]="@Krzysztof Kołakowski"
            ["opchaves"]="@Paulo Chaves"
            ["ommiles"]="@O.M. Miles"
            ["duckdum"]="@eduardo"
            ["rminhoto"]="@Roberto"
            ["pecabum"]="@Petar Petrov"
            ["pmwthunkable"]="@Paul Medlock-Walton"
            ["JanhaviDahihande"]="@janhavi"
            ["kkrogmerio"]="@Adrian"
            ["TingC"]="@Ting Chou"
            ["andresmechali"]="@Andrés Mechali"
            ["Comum"]="@Miguel Ribeiro"
            ["weihuali0509"]="@Wei Li"
          )
          echo "github_to_slack_map=$(declare -p github_to_slack_map)" >> $GITHUB_ENV

      - name: Handle PR Events
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" && "$GITHUB_EVENT_ACTION" == "opened" || "$GITHUB_EVENT_ACTION" == "reopened" ]]; then
            echo "PR opened or reopened event."
            pr_title=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
            pr_url=$(jq -r .pull_request.html_url "$GITHUB_EVENT_PATH")
            branch_name=$(jq -r .pull_request.head.ref "$GITHUB_EVENT_PATH")
            target_branch=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")
            pr_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
            pr_body=$(jq -r .pull_request.body "$GITHUB_EVENT_PATH")

            initial_message_response=$(curl -s -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" -H 'Content-type: application/json' --data "{
              \"channel\": \"$SLACK_CHANNEL\",
              \"text\": \"New release pull request created: <$pr_url|$pr_title>\nBranch: $branch_name -> $target_branch\"
            }" https://slack.com/api/chat.postMessage)
            echo "Initial message response: $initial_message_response"
            if echo "$initial_message_response" | jq -e .ok > /dev/null; then
              message_ts=$(echo "$initial_message_response" | jq -r .ts)
              echo "Message TS: $message_ts"
              new_pr_body="Slack message_ts: ${message_ts}\n\n${pr_body}"
              new_pr_body=$(echo -e "$new_pr_body")
              echo "New PR body: $new_pr_body"

              update_pr_response=$(curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$(jq -n --arg body "$new_pr_body" '{body: $body}')" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/pulls/$pr_number")
              echo "Update PR response: $update_pr_response"
            else
              echo "Failed to retrieve message_ts"
              exit 1
            fi
          fi

          if [[ "$GITHUB_EVENT_NAME" == "pull_request" && "$GITHUB_EVENT_ACTION" == "synchronize" ]]; then
            echo "PR synchronized event."
            pr_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
            pr_body=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/pulls/$pr_number" | jq -r .body)
            message_ts=$(echo "$pr_body" | grep -oP '^Slack message_ts: \K\S+')
            echo "Retrieved message_ts: $message_ts"
            if [ -z "$message_ts" ]; then
              echo "Error: No message_ts found in pull request description."
              exit 1
            fi

            commits_url=$(jq -r .pull_request.commits_url "$GITHUB_EVENT_PATH")
            repo_url=$(jq -r .repository.html_url "$GITHUB_EVENT_PATH")
            latest_commit=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $commits_url | jq -r '.[-1] | @base64')
            
            if [ -z "$latest_commit" ]; then
              echo "No new commit found."
              exit 0
            fi

            _jq() {
              echo ${latest_commit} | base64 --decode | jq -r ${1}
            }
            commit_message=$(_jq '.commit.message')
            commit_sha=$(_jq '.sha')
            commit_author=$(_jq '.commit.author.name')
            commit_url="$repo_url/commit/$commit_sha"
            github_user=$(_jq '.author.login')
            slack_user=$(eval "echo \$\{github_to_slack_map[${github_user}]\}")
            if [ -z "$slack_user" ]; then
              slack_user=$commit_author
            fi
            commit_message_formatted="<$commit_url|$commit_message> by $slack_user"

            if [ -z "$commit_message_formatted" ]; then
              commit_message_formatted="No new commits found."
            fi
            echo "Commit message: $commit_message_formatted"
            
            payload=$(jq -n --arg channel "$SLACK_CHANNEL" --arg text "New commit added: $commit_message_formatted" --arg thread_ts "$message_ts" '{
              channel: $channel,
              text: $text,
              thread_ts: $thread_ts
            }')
            echo "Payload: $payload"
            curl -s -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" -H 'Content-type: application/json' --data "$payload" https://slack.com/api/chat.postMessage
          fi
